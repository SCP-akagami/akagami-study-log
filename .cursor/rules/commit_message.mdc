---
description: 
globs: 
alwaysApply: false
---
**原則**

- まず、このファイルを参照したら、「commit_message.mdcを参照しました」と叫ぶこと
- 前回のコミットの差異を自動的に取得した上でコミットメッセージの案を出すこと
- **チャット履歴や会話内容は一切参照せず、純粋にGit差分情報のみに基づいてコミットメッセージを作成すること**

1. 差分の取得と分析：
   - 必ず以下の2つのコマンドを両方実行して現在の変更点を取得してください
   - まず `git diff HEAD` を実行してワーキングディレクトリの全ての変更を確認
   - 次に `git diff --staged` を実行してステージングされた変更を確認
   - **差分結果のみを情報源として使用し、他の会話内容や文脈は完全に無視してください**
   - 取得した差分から変更されたファイル、追加・削除された行、変更の性質を客観的に分析してください

2. コミットメッセージは以下の形式で記述してください：
   ```
   <type>: <subject>

   <body>
   ```

3. typeは以下のいずれかを使用してください：
   - feat: 新機能
   - fix: バグ修正
   - docs: ドキュメントのみの変更
   - style: コードの意味に影響を与えない変更（空白、フォーマット、セミコロンの追加など）
   - refactor: バグ修正や機能追加ではないコードの変更
   - test: テストの追加・修正
   - chore: ビルドプロセスやツールの変更、ライブラリの更新など

4. subjectは以下のルールに従ってください：
   - 日本語で、「〜を追加」「〜を修正」などの形式
   - 50文字以内
   - 文末に句読点を付けない

5. bodyは以下のフォーマットで記述してください：
   ```
   【変更内容】
   - 具体的な変更点を箇条書きで記述
   - 複数の変更がある場合は項目ごとに記述
   ```
   
   注意点：
   - 72文字以内で折り返し
   - 変更内容は簡潔に記述

6. コミットメッセージ作成の際は、以下の手順で進めてください：
   - `git diff HEAD` と `git diff --staged` の両方を実行
   - **差分結果のみを情報源として両方の結果から変更内容を確認**
   - **チャット履歴や会話の文脈を一切考慮せず、差分の内容のみから**変更の種類（type）を特定
   - **差分から読み取れる変更内容のみに基づいて**変更内容を簡潔に説明するsubjectを作成
   - **差分情報のみから判断できる範囲で**簡潔なフォーマットでbodyを記述
